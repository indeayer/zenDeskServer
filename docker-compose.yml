version: '3.0'
services:
  db:
    image: mysql/mysql-server
    restart: always
    #SQL8 below Native password;
    command: --default-authentication-plugin=mysql_native_password 
    container_name: ZenDeskDB
    # networks:
    #   - app-network
    environment:
      MYSQL_DATABASE: 'ZenDeskApp'
      # So you don't have to use root, but you can if you like
      MYSQL_USER: 'ZenUser'
      # You can use whatever password you like
      MYSQL_PASSWORD: '@*ePEk3SwiYu&=oVuPhi'
      # Password for root access
      MYSQL_ROOT_PASSWORD: '@*ePEk3SwiYu&=oVuPhi'
    volumes:
        -  my-db:/var/lib/mysql
        - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '8600:3306'
    expose:
      - '3306' 
      - '8600'

  webapp:
    command: ["./wait-for-it.sh", "-t" , "30" , "ZenDeskDB:3306", "--", "npm","run","pm2"]
    restart: always
    depends_on:
      - "db"
    image: indeayer/zendeskapp:latest
    container_name: web_app
    volumes:
      -  webserver:/var/www/html
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '8081:8081' 
    expose:
      # Opens port 3306 on the container
      - '8081'
      - '3306'
      # Where our data will be persisted
      # networks:
      #  - app-network

  webserver:
    image: nginx:1.19.2
    container_name: webserver
    restart: unless-stopped
    depends_on:
      - webapp
    ports:
      - '8500:80'
    volumes:
      -  webserver:/var/www/html
      -  ./src/nginx-conf:/etc/nginx/conf.d
    expose:
      # Opens port 3306 on the container
      - '80'
      - '3306'
      - '8081'
      - '8500'
  #   # networks:
  #   #   - app-network

  # certbot:
  #   depends_on:
  #     - webserver
  #   image: certbot/certbot
  #   container_name: certbot
  #   volumes:
  #     - certbot-etc:/etc/letsencrypt
  #     - webserver:/var/www/html
  #   command: certonly --webroot --webroot-path=/var/www/html --email indeayer@gmail.com --agree-tos --no-eff-email --staging -d www.localhost
    

# networks:
# app-network:
#     driver: bridge

# Names our volume
volumes: 
  my-db:
  webapp:
  webserver:
  certbot-etc:
    
  # webserver: